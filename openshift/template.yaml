apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: glitchtip
metadata:
  name: glitchtip
  annotations:
    description: glitchtip
objects:
  # -------- CONFIG MAP ----------

  - apiVersion: v1
    kind: ConfigMap
    data:
      GLITCHTIP_DOMAIN: ${GLITCHTIP_DOMAIN}
    metadata:
      annotations: {}
      labels:
        app.kubernetes.io/instance: glitchtip
        app.kubernetes.io/name: glitchtip
      name: glitchtip-configmap

  # ---- BEAT DEPLOYMENT ------

  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: glitchtip-beat-sa

  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        deployment.kubernetes.io/revision: "1"
      labels:
        app.kubernetes.io/component: beat
        app.kubernetes.io/instance: glitchtip
        app.kubernetes.io/name: glitchtip
      name: glitchtip-beat
    spec:
      progressDeadlineSeconds: 600
      replicas: ${{BEAT_REPLICAS}}
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app.kubernetes.io/component: beat
          app.kubernetes.io/instance: glitchtip
          app.kubernetes.io/name: glitchtip
      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate
      template:
        metadata:
          labels:
            app.kubernetes.io/component: beat
            app.kubernetes.io/instance: glitchtip
            app.kubernetes.io/name: glitchtip
        spec:
          serviceAccountName: glitchtip-beat-sa
          containers:
            - env:
                - name: SERVER_ROLE
                  value: beat
                - name: REDIS_URL
                  valueFrom:
                    secretKeyRef:
                      name: redis-credentials
                      key: redis.url
                - name: SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: glitchtip-secret
                      key: PASSWORD_HASH_TOKEN
                - name: REDIS_PORT
                  valueFrom:
                    secretKeyRef:
                      name: ${REDIS_SECRET_NAME}
                      key: db.port
                - name: REDIS_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${REDIS_SECRET_NAME}
                      key: db.auth_token
                - name: DATABASE_HOST
                  valueFrom:
                    secretKeyRef:
                      name: ${RDS_SECRET_NAME}
                      key: db.host
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${RDS_SECRET_NAME}
                      key: db.password
                - name: DATABASE_NAME
                  valueFrom:
                    secretKeyRef:
                      name: ${RDS_SECRET_NAME}
                      key: db.name
                - name: DATABASE_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${RDS_SECRET_NAME}
                      key: db.user
                - name: PORT
                  value: ${GT_APP_PORT}
              envFrom:
                - configMapRef:
                    name: glitchtip-configmap
              image: "${REGISTRY_IMAGE}:${IMAGE_TAG}"
              imagePullPolicy: Always
              name: glitchtip
              readinessProbe:
                httpGet:
                  path: /
                  port: ${{GT_APP_PORT}}
                  httpHeaders:
                    - name: Test-Header
                      value: Awesome
                initialDelaySeconds: 3
                periodSeconds: 3
              livenessProbe:
                httpGet:
                  path: /
                  port: ${{GT_APP_PORT}}
                  httpHeaders:
                    - name: Test-Header
                      value: Awesome
                initialDelaySeconds: 3
                periodSeconds: 3
              resources:
                limits:
                  cpu: ${{BEAT_CPU_LIMITS}}
                  memory: ${{BEAT_MEMORY_LIMITS}}
                requests:
                  cpu: ${{BEAT_CPU_REQUESTS}}
                  memory: ${{BEAT_MEMORY_REQUESTS}}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30

  # ------- WEB DEPLOYMENT JOB --------------------

  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        glitchtip: web
      name: glitchtip-web
    spec:
      replicas: ${{GT_WEB_REPLICAS}}
      selector:
        matchLabels:
          glitchtip: web
      template:
        metadata:
          labels:
            glitchtip: web
        spec:
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: glithtip
                        operator: In
                        values:
                          - web
                  topologyKey: "kubernetes.io/hostname"
          initContainers:
            - name: init-migration
              image: "${REGISTRY_IMAGE}:${IMAGE_TAG}"
              command: ["python3", "./manage.py", "migrate"]
              env:
                - name: DATABASE_HOST
                  valueFrom:
                    secretKeyRef:
                      name: ${RDS_SECRET_NAME}
                      key: db.host
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${RDS_SECRET_NAME}
                      key: db.password
                - name: DATABASE_NAME
                  valueFrom:
                    secretKeyRef:
                      name: ${RDS_SECRET_NAME}
                      key: db.name
                - name: DATABASE_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${RDS_SECRET_NAME}
                      key: db.user
          containers:
            - env:
                - name: REDIS_URL
                  valueFrom:
                    secretKeyRef:
                      name: redis-credentials
                      key: redis.url
                - name: REDIS_PORT
                  valueFrom:
                    secretKeyRef:
                      name: ${REDIS_SECRET_NAME}
                      key: db.port
                - name: REDIS_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${REDIS_SECRET_NAME}
                      key: db.auth_token
                - name: DATABASE_HOST
                  valueFrom:
                    secretKeyRef:
                      name: ${RDS_SECRET_NAME}
                      key: db.host
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${RDS_SECRET_NAME}
                      key: db.password
                - name: DATABASE_NAME
                  valueFrom:
                    secretKeyRef:
                      name: ${RDS_SECRET_NAME}
                      key: db.name
                - name: DATABASE_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${RDS_SECRET_NAME}
                      key: db.user
                - name: PORT
                  value: ${GT_APP_PORT}
                - name: ENABLE_OBSERVABILITY_API
                  value: "True"
                - name: I_PAID_FOR_GLITCHTIP
                  value: "${I_PAID_FOR_GLITCHTIP}"
                - name: ENABLE_OPEN_USER_REGISTRATION
                  value: "${ENABLE_OPEN_USER_REGISTRATION}"
                - name: GLITCHTIP_DOMAIN
                  valueFrom:
                    configMapKeyRef:
                      name: glitchtip-configmap
                      key: GLITCHTIP_DOMAIN
                - name: DEFAULT_FROM_EMAIL
                  value: ${DEFAULT_FROM_EMAIL}
                - name: EMAIL_URL
                  value: ${EMAIL_URL}
                - name: ENABLE_OBSERVABILITY_API
                  value: "True"
              image: "${REGISTRY_IMAGE}:${IMAGE_TAG}"
              name: web
              ports:
                - containerPort: ${{GT_APP_PORT}}
              readinessProbe:
                httpGet:
                  path: /
                  port: ${{GT_APP_PORT}}
                  httpHeaders:
                    - name: Test-Header
                      value: Awesome
                initialDelaySeconds: 3
                periodSeconds: 3
              livenessProbe:
                httpGet:
                  path: /
                  port: ${{GT_APP_PORT}}
                  httpHeaders:
                    - name: Test-Header
                      value: Awesome
                initialDelaySeconds: 3
                periodSeconds: 3
              resources:
                requests:
                  cpu: ${{GT_WEB_CPU_REQUESTS}}
                  memory: ${{GT_WEB_MEMORY_REQUESTS}}
                limits:
                  memory: ${{GT_WEB_MEMORY_LIMITS}}
                  cpu: ${{GT_WEB_CPU_LIMITS}}
          restartPolicy: Always

  # ---------- GT WEB SERVICE -----------

  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        glitchtip: web
      name: glitchtip-web
    spec:
      ports:
        - name: "8000"
          port: ${{GT_APP_PORT}}
          targetPort: ${{GT_APP_PORT}}
      selector:
        glitchtip: web

  # --------- WORKER DEPLOYMENT --------------

  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        glitchtip: worker
      name: glitchtip-worker
    spec:
      replicas: ${{GT_WORKER_REPLICAS}}
      selector:
        matchLabels:
          glitchtip: worker
      template:
        metadata:
          labels:
            glitchtip: worker
        spec:
          containers:
            - args:
                - celery
                - -A
                - glitchtip
                - worker
                - -B
                - -l
                - INFO
                - -s
                - /celery/celerybeat-schedule
              env:
                - name: REDIS_URL
                  valueFrom:
                    secretKeyRef:
                      name: redis-credentials
                      key: redis.url
                - name: REDIS_PORT
                  valueFrom:
                    secretKeyRef:
                      name: ${REDIS_SECRET_NAME}
                      key: db.port
                - name: REDIS_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${REDIS_SECRET_NAME}
                      key: db.auth_token
                - name: DATABASE_HOST
                  valueFrom:
                    secretKeyRef:
                      name: ${RDS_SECRET_NAME}
                      key: db.host
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${RDS_SECRET_NAME}
                      key: db.password
                - name: DATABASE_NAME
                  valueFrom:
                    secretKeyRef:
                      name: ${RDS_SECRET_NAME}
                      key: db.name
                - name: DATABASE_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${RDS_SECRET_NAME}
                      key: db.user
                - name: PORT
                  value: ${GT_APP_PORT}
              image: "${REGISTRY_IMAGE}:${IMAGE_TAG}"
              name: worker
              readinessProbe:
                exec:
                  command: ["ls", "/tmp"]
                initialDelaySeconds: 30
                periodSeconds: 5
              livenessProbe:
                exec:
                  command: ["ls", "/tmp"]
                initialDelaySeconds: 30
                periodSeconds: 5
              resources:
                requests:
                  cpu: ${{GT_WORKER_CPU_REQUESTS}}
                  memory: ${{GT_WORKER_MEMORY_REQUESTS}}
                limits:
                  memory: ${{GT_WORKER_MEMORY_LIMITS}}
                  cpu: ${{GT_WORKER_CPU_LIMITS}}
          restartPolicy: Always

  # ---- CREATE SUPERUSER JOB -------------

  - apiVersion: batch/v1
    kind: Job
    metadata:
      name: superuser-job-1
    spec:
      parallelism: 1
      completions: 1
      activeDeadlineSeconds: 1800
      backoffLimit: 3
      ttlSecondsAfterFinished: 100
      template:
        metadata:
          name: superuser-job-1
        spec:
          containers:
            - name: superuser-job-1
              image: "${REGISTRY_IMAGE}:${IMAGE_TAG}"
              command:
                ["python3", "./manage.py", "createsuperuser", "--noinput"]
              readinessProbe:
                exec:
                  command:
                    - ls
                    - /tmp/
                initialDelaySeconds: 5
                periodSeconds: 5
              livenessProbe:
                exec:
                  command:
                    - ls
                    - /tmp/
                initialDelaySeconds: 5
                periodSeconds: 5
              resources:
                requests:
                  cpu: 1m
                  memory: 500M
                limits:
                  memory: 800M
                  cpu: 2m
              envFrom:
                - secretRef:
                    name: superuser-secret
              env:
                - name: DATABASE_HOST
                  valueFrom:
                    secretKeyRef:
                      name: ${RDS_SECRET_NAME}
                      key: db.host
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${RDS_SECRET_NAME}
                      key: db.password
                - name: DATABASE_NAME
                  valueFrom:
                    secretKeyRef:
                      name: ${RDS_SECRET_NAME}
                      key: db.name
                - name: DATABASE_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${RDS_SECRET_NAME}
                      key: db.user

          restartPolicy: Never

parameters:
  - description: Image tag
    displayName: Image tag
    required: true
    name: IMAGE_TAG
    value: "latest"

  - description: Registry Image to use
    displayName: Registry image
    required: true
    name: REGISTRY_IMAGE
    value: "quay.io/cs-sre/glitchtip"

  - description: Glitchtip Application exposed port
    displayName: GT_APP_PORT
    required: true
    name: GT_APP_PORT
    value: "8000"

  - description: Route url created for glitchtip
    displayName: GLITCHTIP_DOMAIN
    required: true
    name: GLITCHTIP_DOMAIN
    value: "https://glitchtip.stage.devshift.net"

  - description: DEFAULT_FROM_EMAIL
    displayName: DEFAULT_FROM_EMAIL
    required: true
    name: DEFAULT_FROM_EMAIL
    value: "no-reply@devshift.net"

  - description: EMAIL_URL
    displayName: EMAIL_URL
    required: true
    name: EMAIL_URL
    value: "smtp+tls://smtp-user:smtp-password@email-smtp.eu-west-1.amazonaws.com:587"

  - description: ENABLE_OPEN_USER_REGISTRATION
    displayName: ENABLE_OPEN_USER_REGISTRATION
    required: true
    name: ENABLE_OPEN_USER_REGISTRATION
    value: "False"

  - description: I_PAID_FOR_GLITCHTIP
    displayName: I_PAID_FOR_GLITCHTIP
    required: true
    name: I_PAID_FOR_GLITCHTIP
    value: "True"

  # MEMORY REQUESTS
  - description: BEAT_MEMORY_REQUESTS
    displayName: BEAT_MEMORY_REQUESTS
    required: true
    name: BEAT_MEMORY_REQUESTS
    value: "32Mi"

  - description: GT_WEB_MEMORY_REQUESTS
    displayName: GT_WEB_MEMORY_REQUESTS
    required: true
    name: GT_WEB_MEMORY_REQUESTS
    value: "800M"

  - description: GT_WORKER_MEMORY_REQUESTS
    displayName: GT_WORKER_MEMORY_REQUESTS
    required: true
    name: GT_WORKER_MEMORY_REQUESTS
    value: "500M"

  # MEMORY LIMITS
  - description: BEAT_MEMORY_LIMITS
    displayName: BEAT_MEMORY_LIMITS
    required: true
    name: BEAT_MEMORY_LIMITS
    value: "96Mi"

  - description: GT_WEB_MEMORY_LIMITS
    displayName: GT_WEB_MEMORY_LIMITS
    required: true
    name: GT_WEB_MEMORY_LIMITS
    value: "2G"

  - description: GT_WORKER_MEMORY_LIMITS
    displayName: GT_WORKER_MEMORY_LIMITS
    required: true
    name: GT_WORKER_MEMORY_LIMITS
    value: "1G"

  # CPU REQUESTS
  - description: BEAT_CPU_REQUESTS
    displayName: BEAT_CPU_REQUESTS
    required: true
    name: BEAT_CPU_REQUESTS
    value: "1m"

  - description: GT_WEB_CPU_REQUESTS
    displayName: GT_WEB_CPU_REQUESTS
    required: true
    name: GT_WEB_CPU_REQUESTS
    value: "1"

  - description: GT_WORKER_CPU_REQUESTS
    displayName: GT_WORKER_CPU_REQUESTS
    required: true
    name: GT_WORKER_CPU_REQUESTS
    value: "100m"

  # CPU LIMITS
  - description: BEAT_CPU_LIMITS
    displayName: BEAT_CPU_LIMITS
    required: true
    name: BEAT_CPU_LIMITS
    value: "50m"

  - description: MIGRATION_JOB_CPU_LIMITS
    displayName: MIGRATION_JOB_CPU_LIMITS
    required: true
    name: MIGRATION_JOB_CPU_LIMITS
    value: "100m"

  - description: GT_WEB_CPU_LIMITS
    displayName: GT_WEB_CPU_LIMITS
    required: true
    name: GT_WEB_CPU_LIMITS
    value: "5"

  - description: GT_WORKER_CPU_LIMITS
    displayName: GT_WORKER_CPU_LIMITS
    required: true
    name: GT_WORKER_CPU_LIMITS
    value: "200m"

  # REPLICAS
  - description: BEAT_REPLICAS
    displayName: BEAT_REPLICAS
    required: true
    name: BEAT_REPLICAS
    value: "1"

  - description: GT_WEB_REPLICAS
    displayName: GT_WEB_REPLICAS
    required: true
    name: GT_WEB_REPLICAS
    value: "3"

  - description: GT_WORKER_REPLICAS
    displayName: GT_WORKER_REPLICAS
    required: true
    name: GT_WORKER_REPLICAS
    value: "1"

  - description: RDS secret name
    name: RDS_SECRET_NAME
    value: glitchtip-rds

  - description: Redis secret name
    name: REDIS_SECRET_NAME
    value: glitchtip-elasticache
